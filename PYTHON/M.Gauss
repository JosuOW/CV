{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "1966a453",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "42365adb",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "6c7cc79f",
   "metadata": {},
   "outputs": [],
   "source": [
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "d1ff6408",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "893c6c3c",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Menú\n",
      "1. Ingrese el sistema de ecuaciones\n",
      "2. Resolver por Gauss Jacobi\n",
      "3. Resolver por Gauss Seidel\n",
      "4. Resolver por ambos métodos\n",
      "5. Salir\n",
      "Ingrese la opción deseada: 1\n",
      "\n",
      "Ejemplo de ecuacion C1x+C2Y=TI.\n",
      "Ingrese el número de ecuaciones (2 o 3): 2\n",
      "Ingrese los coeficientes C1, C2, Cn de la ecuación 1 separados por espacios ejemplo 2 0 representa 2x+0y : 2 0\n",
      "Ingrese los coeficientes C1, C2, Cn de la ecuación 2 separados por espacios ejemplo 2 0 representa 2x+0y : 3 4\n",
      "Ingrese los términos independientes TI separados por espacios ejemplo 2 4 5. El orden con respecto a la ecuacion que pertenecen: 5 7\n",
      "\n",
      "Sistema ingresado correctamente:\n",
      "Ecuación 1: 2.0x + 0.0y = 5.0\n",
      "Ecuación 2: 3.0x + 4.0y = 7.0\n",
      "\n",
      "Menú\n",
      "1. Ingrese el sistema de ecuaciones\n",
      "2. Resolver por Gauss Jacobi\n",
      "3. Resolver por Gauss Seidel\n",
      "4. Resolver por ambos métodos\n",
      "5. Salir\n",
      "Ingrese la opción deseada: 4\n",
      "\n",
      "Solución por Gauss Jacobi: [ 2.5   -0.125]\n",
      "Solución por Gauss Seidel: [ 2.5   -0.125]\n",
      "\n",
      "Tiempo de ejecución (Jacobi): 0.00040459632873535156 segundos\n",
      "Tiempo de ejecución (Seidel): 0.0003190040588378906 segundos\n",
      "El método de Gauss-Seidel es más eficiente.\n",
      "\n",
      "Menú\n",
      "1. Ingrese el sistema de ecuaciones\n",
      "2. Resolver por Gauss Jacobi\n",
      "3. Resolver por Gauss Seidel\n",
      "4. Resolver por ambos métodos\n",
      "5. Salir\n",
      "Ingrese la opción deseada: 5\n",
      "Saliendo del programa.\n"
     ]
    }
   ],
   "source": [
    "import numpy as np\n",
    "\n",
    "def ingresar_sistema():\n",
    "    n = int(input(\"Ingrese el número de ecuaciones (2 o 3): \"))\n",
    "    coeficientes = []\n",
    "    for i in range(n):\n",
    "        fila = [float(x) for x in input(f\"Ingrese los coeficientes C1, C2, Cn de la ecuación {i + 1} separados por espacios ejemplo 2 0 representa 2x+0y : \").split()]\n",
    "        coeficientes.append(fila)\n",
    "    return np.array(coeficientes)\n",
    "\n",
    "def gauss_jacobi(A, b, iteraciones=50, tolerancia=1e-6):\n",
    "    n = len(A)\n",
    "    x = np.zeros(n)\n",
    "    for _ in range(iteraciones):\n",
    "        x_nuevo = np.copy(x)\n",
    "        for i in range(n):\n",
    "            suma = np.dot(A[i, :i], x_nuevo[:i]) + np.dot(A[i, i+1:], x[i+1:])\n",
    "            x_nuevo[i] = (b[i] - suma) / A[i, i]\n",
    "        if np.linalg.norm(x_nuevo - x, np.inf) < tolerancia:\n",
    "            return x_nuevo\n",
    "        x = np.copy(x_nuevo)\n",
    "    return x\n",
    "\n",
    "def gauss_seidel(A, b, iteraciones=50, tolerancia=1e-6):\n",
    "    n = len(A)\n",
    "    x = np.zeros(n)\n",
    "    for _ in range(iteraciones):\n",
    "        x_nuevo = np.copy(x)\n",
    "        for i in range(n):\n",
    "            suma = np.dot(A[i, :i], x_nuevo[:i]) + np.dot(A[i, i+1:], x[i+1:])\n",
    "            x_nuevo[i] = (b[i] - suma) / A[i, i]\n",
    "        if np.linalg.norm(x_nuevo - x, np.inf) < tolerancia:\n",
    "            return x_nuevo\n",
    "        x = np.copy(x_nuevo)\n",
    "    return x\n",
    "\n",
    "def main():\n",
    "    sistema_ingresado = False\n",
    "    A = []\n",
    "    b = []\n",
    "    \n",
    "    while True:\n",
    "        print(\"\\nMenú\")\n",
    "        print(\"1. Ingrese el sistema de ecuaciones\")\n",
    "        print(\"2. Resolver por Gauss Jacobi\")\n",
    "        print(\"3. Resolver por Gauss Seidel\")\n",
    "        print(\"4. Resolver por ambos métodos\")\n",
    "        print(\"5. Salir\")\n",
    "\n",
    "        opcion = int(input(\"Ingrese la opción deseada: \"))\n",
    "\n",
    "        if opcion == 1:\n",
    "            print(\"\\nEjemplo de ecuacion C1x+C2Y=TI.\")\n",
    "            A = ingresar_sistema()\n",
    "            b = np.array([float(x) for x in input(\"Ingrese los términos independientes TI separados por espacios ejemplo 2 4 5. El orden con respecto a la ecuacion que pertenecen: \").split()])\n",
    "            sistema_ingresado = True\n",
    "            # Imprimir el sistema de ecuaciones ingresado\n",
    "            print(\"\\nSistema ingresado correctamente:\")\n",
    "            for i in range(len(A)):\n",
    "                ecuacion = \" + \".join([f\"{A[i, j]}{var}\" for j, var in enumerate([\"x\", \"y\", \"z\"][:len(A[i])])])\n",
    "                print(f\"Ecuación {i + 1}: {ecuacion} = {b[i]}\")\n",
    "        \n",
    "        elif opcion == 2:\n",
    "            if sistema_ingresado:\n",
    "                solucion_jacobi = gauss_jacobi(A, b)\n",
    "                print(\"\\nSolución por Gauss Jacobi:\", solucion_jacobi)\n",
    "            else:\n",
    "                print(\"\\nPrimero ingrese el sistema de ecuaciones.\")\n",
    "        \n",
    "        elif opcion == 3:\n",
    "            if sistema_ingresado:\n",
    "                solucion_seidel = gauss_seidel(A, b)\n",
    "                print(\"\\nSolución por Gauss Seidel:\", solucion_seidel)\n",
    "            else:\n",
    "                print(\"\\nPrimero ingrese el sistema de ecuaciones.\")\n",
    "        \n",
    "        elif opcion == 4:\n",
    "            if sistema_ingresado:\n",
    "                solucion_jacobi = gauss_jacobi(A, b)\n",
    "                solucion_seidel = gauss_seidel(A, b)\n",
    "                print(\"\\nSolución por Gauss Jacobi:\", solucion_jacobi)\n",
    "                print(\"Solución por Gauss Seidel:\", solucion_seidel)\n",
    "                \n",
    "                # Medir tiempos y comparar eficiencia\n",
    "                import time\n",
    "                start_time_jacobi = time.time()\n",
    "                soluciones_jacobi = gauss_jacobi(A, b)\n",
    "                elapsed_time_jacobi = time.time() - start_time_jacobi\n",
    "                \n",
    "                start_time_seidel = time.time()\n",
    "                soluciones_seidel = gauss_seidel(A, b)\n",
    "                elapsed_time_seidel = time.time() - start_time_seidel\n",
    "                \n",
    "                # imprimir_soluciones(obtener_variables(len(b)), soluciones_jacobi, \"Jacobi\")\n",
    "                # imprimir_soluciones(obtener_variables(len(b)), soluciones_seidel, \"Seidel\")\n",
    "                \n",
    "                print(f\"\\nTiempo de ejecución (Jacobi): {elapsed_time_jacobi} segundos\")\n",
    "                print(f\"Tiempo de ejecución (Seidel): {elapsed_time_seidel} segundos\")\n",
    "                \n",
    "                if elapsed_time_jacobi < elapsed_time_seidel:\n",
    "                    print(\"El método de Gauss-Jacobi es más eficiente.\")\n",
    "                elif elapsed_time_seidel < elapsed_time_jacobi:\n",
    "                    print(\"El método de Gauss-Seidel es más eficiente.\")\n",
    "                else:\n",
    "                    print(\"Ambos métodos tienen tiempos similares.\")\n",
    "            else:\n",
    "                print(\"\\nPrimero ingrese el sistema de ecuaciones.\")\n",
    "        \n",
    "        elif opcion == 5:\n",
    "            print(\"Saliendo del programa.\")\n",
    "            break\n",
    "        \n",
    "        else:\n",
    "            print(\"Opción no válida. Por favor, ingrese una opción válida.\")\n",
    "\n",
    "if __name__ == \"__main__\":\n",
    "    main()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "7770a081",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
